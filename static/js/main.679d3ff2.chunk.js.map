{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","todoItems","push","index","value","done","TodoList","items","this","props","map","item","key","removeItem","markTodoDone","className","React","Component","TodoListItem","onClickClose","bind","onClickDone","parseInt","todoClass","aria-hidden","onClick","type","TodoForm","onSubmit","refs","itemName","focus","event","preventDefault","newItemValue","addItem","form","reset","ref","placeholder","TodoHeader","App","state","todoItem","unshift","length","setState","itemIndex","splice","todo","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.679d3ff2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nvar todoItems = [];\ntodoItems.push({ index: 1, value: 'learn react', done: false });\ntodoItems.push({ index: 2, value: 'Go shopping', done: true });\ntodoItems.push({ index: 3, value: 'buy flowers', done: true });\n\nclass TodoList extends React.Component {\n  render() {\n    var items = this.props.items.map((item, index) => {\n      return (\n        <TodoListItem\n          key={index}\n          item={item}\n          index={index}\n          removeItem={this.props.removeItem}\n          markTodoDone={this.props.markTodoDone}\n        />\n      );\n    });\n    return <ul className='list-group'> {items} </ul>;\n  }\n}\n\nclass TodoListItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onClickClose = this.onClickClose.bind(this);\n    this.onClickDone = this.onClickDone.bind(this);\n  }\n  onClickClose() {\n    var index = parseInt(this.props.index);\n    this.props.removeItem(index);\n  }\n  onClickDone() {\n    var index = parseInt(this.props.index);\n    this.props.markTodoDone(index);\n  }\n  render() {\n    var todoClass = this.props.item.done ? 'done' : 'undone';\n    return (\n      <li className='list-group-item '>\n        <div className={todoClass}>\n          <span\n            className='glyphicon glyphicon-ok icon'\n            aria-hidden='true'\n            onClick={this.onClickDone}\n          ></span>\n          {this.props.item.value}\n          <button type='button' className='close' onClick={this.onClickClose}>\n            &times;\n          </button>\n        </div>\n      </li>\n    );\n  }\n}\n\nclass TodoForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n  componentDidMount() {\n    this.refs.itemName.focus();\n  }\n  onSubmit(event) {\n    event.preventDefault();\n    var newItemValue = this.refs.itemName.value;\n\n    if (newItemValue) {\n      this.props.addItem({ newItemValue });\n      this.refs.form.reset();\n    }\n  }\n  render() {\n    return (\n      <form ref='form' onSubmit={this.onSubmit} className='form-inline'>\n        <input\n          type='text'\n          ref='itemName'\n          className='form-control'\n          placeholder='add a new todo...'\n        />\n        <button type='submit' className='btn btn-default'>\n          Add\n        </button>\n      </form>\n    );\n  }\n}\n\nclass TodoHeader extends React.Component {\n  render() {\n    return <h1>Todo list</h1>;\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addItem = this.addItem.bind(this);\n    this.removeItem = this.removeItem.bind(this);\n    this.markTodoDone = this.markTodoDone.bind(this);\n    this.state = { todoItems: todoItems };\n  }\n  addItem(todoItem) {\n    todoItems.unshift({\n      index: todoItems.length + 1,\n      value: todoItem.newItemValue,\n      done: false,\n    });\n    this.setState({ todoItems: todoItems });\n  }\n  removeItem(itemIndex) {\n    todoItems.splice(itemIndex, 1);\n    this.setState({ todoItems: todoItems });\n  }\n  markTodoDone(itemIndex) {\n    var todo = todoItems[itemIndex];\n    todoItems.splice(itemIndex, 1);\n    todo.done = !todo.done;\n    todo.done ? todoItems.push(todo) : todoItems.unshift(todo);\n    this.setState({ todoItems: todoItems });\n  }\n  render() {\n    return (\n      <div id='main'>\n        <TodoHeader />\n        <TodoList\n          items={this.state.todoItems}\n          removeItem={this.removeItem}\n          markTodoDone={this.markTodoDone}\n        />\n        <TodoForm addItem={this.addItem} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}